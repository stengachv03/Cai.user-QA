import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request
import random

TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("No BOT_TOKEN environment variable set")

# Replace with actual chat IDs
ADMIN_CHAT_ID = 123456789  # Chat ID for @sten_anyqx
CREATOR_CHAT_ID = 987654321  # Chat ID for @vl_std

WALLET_ADDRESS = 'TVkXgDHJsMQcR14Mr6uPdpELqJuG6Aok5L'
NETWORK = 'TRC20'

bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)

# In-memory storage for stats and tickets
user_stats = {}  # {user_id: {"messages": int, "ads": int}}
tickets = {}  # {user_id: ticket_id}
next_ticket_id = 1000

# Admin commands
admin_users = {ADMIN_CHAT_ID, CREATOR_CHAT_ID}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"Processing /start for user_id: {message.from_user.id}, chat_id: {message.chat.id}")
    user_id = message.from_user.id
    user_stats[user_id] = user_stats.get(user_id, {"messages": 0, "ads": 0})
    user_stats[user_id]["messages"] += 1
    tickets[user_id] = next_ticket_id
    next_ticket_id += 1

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üíº –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"))
    markup.add(KeyboardButton("üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"))
    markup.add(KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"))

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–•–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? –£ —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞/–≤–∏–¥–µ–æ? –•–æ—á–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É?\n"
        "–ò–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º –∫—Ä—É—Ç—ã–º –ø—Ä–æ –ò–ò –±–æ—Ç–æ–≤?\n"
        "–ü–∏—à–∏ –º–Ω–µ —Å–º–µ–ª–æ üòä\n\n"
        "–Ø —á–∏—Ç–∞—é –≤—Å—ë —Å —Ç–µ–ø–ª–æ–º –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º üíú"
    )
    try:
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        print(f"Sent welcome message to {message.chat.id}")
    except Exception as e:
        print(f"Error sending welcome message: {e}")

@bot.message_handler(func=lambda message: message.text == "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
def handle_support(message):
    print(f"Processing –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å for user_id: {message.from_user.id}")
    support_text = (
        f"–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å —á–µ—Ä–µ–∑ USDT via —Å–µ—Ç—å {NETWORK}:\n"
        f"{WALLET_ADDRESS}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üòä"
    )
    try:
        bot.send_message(message.chat.id, support_text)
        print(f"Sent support message to {message.chat.id}")
    except Exception as e:
        print(f"Error sending support message: {e}")

@bot.message_handler(func=lambda message: message.text == "üíº –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
def handle_cooperation(message):
    print(f"Processing –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ for user_id: {message.from_user.id}")
    user_id = message.from_user.id
    user_stats[user_id]["ads"] += 1
    price_list = (
        "üíº –ê–≤—Ç–æ—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º: —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\n\n"
        "–°–ø–∏—Å–æ–∫ –ø—Ä–∞–π—Å–∞:\n"
        "1. –í–∞—à –ø–æ—Å—Ç –≤ –æ–¥–Ω–æ–º –∏–∑ —Ç–≥ –∫–∞–Ω–∞–ª–æ–≤ @characterhh –∏–ª–∏ @janitorai6 - 10$\n"
        "2. –ú–æ–π –æ–±–∑–æ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ –í–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ/–∫–∞–Ω–∞–ª–µ/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –º–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ - 30$\n"
        "3. –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ –¥–æ 10 —Å–µ–∫—É–Ω–¥ –æ –í–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–∞ —Ç–∏–∫ —Ç–æ–∫ –∞–∫–∫–∞—É–Ω—Ç - 50$\n"
        "4. –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ä–æ–ª–∏–∫ –æ—Ç–∑—ã–≤ –æ –í–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ - 99$\n\n"
        "–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –Ω—é–∞–Ω—Å—ã –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –ª–∏—á–Ω–æ."
    )
    
    inline_markup = InlineKeyboardMarkup()
    inline_markup.add(InlineKeyboardButton("üõí –•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="order_ad"))
    
    try:
        bot.send_message(message.chat.id, price_list, reply_markup=inline_markup)
        print(f"Sent cooperation message to {message.chat.id}")
    except Exception as e:
        print(f"Error sending cooperation message: {e}")

@bot.message_handler(func=lambda message: message.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
def handle_media(message):
    print(f"Processing –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ for user_id: {message.from_user.id}")
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="send_photo"))
    markup.add(InlineKeyboardButton("üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="send_video"))
    try:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞:", reply_markup=markup)
        print(f"Sent media menu to {message.chat.id}")
    except Exception as e:
        print(f"Error sending media menu: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "order_ad")
def handle_order_ad(call):
    print(f"Processing order_ad for user_id: {call.from_user.id}")
    bot.answer_callback_query(call.id)
    greeting = "üõí –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –í–∞–º–∏. –°–ª—É—à–∞–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    try:
        bot.send_message(call.message.chat.id, greeting)
        print(f"Sent order_ad message to {call.message.chat.id}")
        user_states[call.from_user.id] = 'waiting_proposal'
    except Exception as e:
        print(f"Error sending order_ad message: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["send_photo", "send_video"])
def handle_media_request(call):
    print(f"Processing media request ({call.data}) for user_id: {call.from_user.id}")
    user_id = call.from_user.id
    if call.data == "send_photo":
        try:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            print(f"Sent photo request to {user_id}")
            user_states[user_id] = 'waiting_photo'
        except Exception as e:
            print(f"Error sending photo request: {e}")
    else:
        try:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
            print(f"Sent video request to {user_id}")
            user_states[user_id] = 'waiting_video'
        except Exception as e:
            print(f"Error sending video request: {e}")

@bot.message_handler(content_types=['photo', 'video'])
def handle_media_upload(message):
    print(f"Processing media upload ({message.content_type}) for user_id: {message.from_user.id}")
    user_id = message.from_user.id
    if user_id in user_states:
        if user_states[user_id] == 'waiting_photo' and message.content_type == 'photo':
            try:
                bot.forward_message(CREATOR_CHAT_ID, message.chat.id, message.message_id)
                bot.send_message(user_id, "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
                print(f"Forwarded photo to {CREATOR_CHAT_ID}")
                del user_states[user_id]
            except Exception as e:
                print(f"Error handling photo: {e}")
        elif user_states[user_id] == 'waiting_video' and message.content_type == 'video':
            try:
                bot.forward_message(CREATOR_CHAT_ID, message.chat.id, message.message_id)
                bot.send_message(user_id, "–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
                print(f"Forwarded video to {CREATOR_CHAT_ID}")
                del user_states[user_id]
            except Exception as e:
                print(f"Error handling video: {e}")
        else:
            try:
                bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                print(f"Sent error message to {user_id}")
            except Exception as e:
                print(f"Error sending media type error: {e}")
    else:
        try:
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞.")
            print(f"Sent media menu prompt to {user_id}")
        except Exception as e:
            print(f"Error sending media prompt: {e}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    print(f"Processing message for user_id: {message.from_user.id}, text: {message.text}")
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    text = message.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    
    # Auto-tags
    tag = "üí° –í–æ–ø—Ä–æ—Å / –∏–¥–µ—è"
    if any(keyword in text.lower() for keyword in ["—Ä–µ–∫–ª–∞–º–∞", "–∫—É–ø–∏—Ç—å", "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å"]):
        tag = "üíº –†–µ–∫–ª–∞–º–∞"
    elif any(keyword in text.lower() for keyword in ["–±–æ—Ç", "–∏–¥–µ—è", "–≤–æ–ø—Ä–æ—Å"]):
        tag = "üí° –í–æ–ø—Ä–æ—Å / –∏–¥–µ—è"

    user_stats[user_id] = user_stats.get(user_id, {"messages": 0, "ads": 0})
    user_stats[user_id]["messages"] += 1
    ticket_id = tickets.get(user_id, next_ticket_id - 1)
    tickets[user_id] = ticket_id

    notification = (
        f"‚ö° –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"üë§ @{username} (id: {user_id})\n"
        f"üÜî Ticket #{ticket_id}\n"
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n"
        f"üè∑ {tag}"
    )

    if user_id in user_states and user_states[user_id] == 'waiting_proposal':
        try:
            bot.forward_message(CREATOR_CHAT_ID, message.chat.id, message.message_id)
            bot.send_message(CREATOR_CHAT_ID, notification)
            bot.send_message(message.chat.id, "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!")
            print(f"Processed proposal for {user_id}")
            del user_states[user_id]
        except Exception as e:
            print(f"Error processing proposal: {e}")
    elif message.text not in ["üíº –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"]:
        try:
            bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
            bot.send_message(ADMIN_CHAT_ID, notification)
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–¥–µ—è –ø–µ—Ä–µ–¥–∞–Ω–∞. –û—Ç–≤–µ—á—É, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –∑–∞—Ö–æ—á–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å.")
            print(f"Processed general message for {user_id}")
        except Exception as e:
            print(f"Error processing general message: {e}")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    print(f"Processing /stats for chat_id: {message.chat.id}")
    try:
        if message.chat.id not in admin_users:
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            print(f"Access denied for {message.chat.id}")
            return
        total_users = len(user_stats)
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        for user_id, stats in user_stats.items():
            username = bot.get_chat_member(user_id, user_id).user.username or str(user_id)
            stats_text += f"- @{username} (id: {user_id}): —Å–æ–æ–±—â–µ–Ω–∏–π {stats['messages']}, –∑–∞—è–≤–æ–∫ {stats['ads']}\n"
        bot.send_message(message.chat.id, stats_text)
        print(f"Sent stats to {message.chat.id}")
    except Exception as e:
        print(f"Error sending stats: {e}")

@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    print(f"Processing /broadcast for chat_id: {message.chat.id}")
    try:
        if message.chat.id not in admin_users:
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            print(f"Access denied for {message.chat.id}")
            return
        if len(message.text.split()) < 2:
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: /broadcast –≤–∞—à_—Ç–µ–∫—Å—Ç")
            print(f"Invalid broadcast format for {message.chat.id}")
            return
        broadcast_text = message.text.split(maxsplit=1)[1]
        for user_id in user_stats.keys():
            bot.send_message(user_id, broadcast_text)
        bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        print(f"Broadcast completed from {message.chat.id}")
    except Exception as e:
        print(f"Error broadcasting: {e}")

@bot.message_handler(commands=['ban'])
def ban_user(message):
    print(f"Processing /ban for chat_id: {message.chat.id}")
    try:
        if message.chat.id not in admin_users:
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            print(f"Access denied for {message.chat.id}")
            return
        if len(message.text.split()) < 2:
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban user_id")
            print(f"Invalid ban format for {message.chat.id}")
            return
        user_id = int(message.text.split()[1])
        if user_id in user_stats:
            del user_stats[user_id]
            del tickets[user_id]
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            print(f"Banned user {user_id} from {message.chat.id}")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            print(f"User {user_id} not found from {message.chat.id}")
    except Exception as e:
        print(f"Error banning user: {e}")

@bot.message_handler(commands=['help'])
def send_help(message):
    print(f"Processing /help for chat_id: {message.chat.id}")
    try:
        if message.chat.id not in admin_users:
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            print(f"Access denied for {message.chat.id}")
            return
        help_text = (
            "üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
            "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/broadcast —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º\n"
            "/ban id ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å"
        )
        bot.send_message(message.chat.id, help_text)
        print(f"Sent help to {message.chat.id}")
    except Exception as e:
        print(f"Error sending help: {e}")

@server.route('/' + TOKEN, methods=['POST'])
def webhook():
    print(f"Received webhook request for token: {TOKEN}")
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    print(f"Processed webhook update")
    return 'OK', 200

@server.route('/')
def health_check():
    print("Health check requested")
    return 'Service is running', 200

if __name__ == '__main__':
    port = int(os.getenv('PORT'))
    print(f"Starting server on port {port}")
    WEBHOOK_URL = f"https://cai-user-qa-1.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"Webhook set to {WEBHOOK_URL}")
    server.run(host='0.0.0.0', port=port)
